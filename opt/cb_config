#!/usr/bin/env escript
%% -*- erlang -*- 

buildDbConfiguration(HttpPort, Host, DbPort, Username, Password, DbName, DatabaseType) ->
    [{port, HttpPort},
     {db_host, Host},
     {db_port, DbPort},
     {db_username, Username},
     {db_password, Password},
     {db_database, DbName},
     {db_adapter, DatabaseType}].


parseDB(mock, _, Port) -> buildDbConfiguration(Port, localhost, 1979, boss, boss, boss, mock);
parseDB(DatabaseType, EnvVar, Port) ->
    io:format("Looking up '~p' environment variable for connection string...~n", [EnvVar]),
    {ok, {_, UserPass, Host, DbPort, [$/ | DbName], _}} = http_uri:parse(os:getenv(EnvVar)),
    [Username, Password] = string:tokens(UserPass, ":"),
    buildDbConfiguration(Port, Host, DbPort,Username, Password, DbName, DatabaseType).

createDbConfiguration(SrcBossConfig, HttpPort) ->
  % database connection setup
  case dict:find(db_adapter, SrcBossConfig) of
    {ok, mongodb} ->
        io:format("MongoDb configuration detected.~n"),
        parseDB(mongodb,  "MONGOHQ_URL", HttpPort);
    {ok, pgsql} ->
      io:format("Postgres database configuration detected.~n"),
      parseDB(pgsql, "DATABASE_URL", HttpPort);
    {ok, mock} ->
      io:format("Using in memory mock database.~n"),
      parseDB(mock, null, HttpPort);
    {_, Type} ->
      io:format("database type '~p' for key 'db_adapter' is not supported. Forcing mock.~n", [Type]),
      parseDB(mock, null, HttpPort)
  end.


main([Src, Dest]) ->

  % transform file into a dictionary
  {ok, [Terms]} = file:consult(Src),
  TermsDic = dict:from_list(Terms),
  {ok, BossTerms} = dict:find(boss, TermsDic),
  SrcBossConfig = dict:from_list(BossTerms),

  {HttpPort, _} = string:to_integer(os:getenv("PORT")),
  BossConfigured = lists:foldl(fun({K, V}, Acc)->
    dict:store(K, V, Acc)
  end, SrcBossConfig, createDbConfiguration(SrcBossConfig, HttpPort)),

  % rip out other applications since cb_admin seems to mess up routing on heroku
  {ok, [AppName|_]} = dict:find(applications, SrcBossConfig),
  StrippedAppName = dict:store(applications, [AppName], BossConfigured),
  
  CombinedConfig = dict:store(boss, dict:to_list(StrippedAppName), TermsDic),

  %lager params
  BossConfigOutput = dict:store(lager, [{handlers,
    [{lager_console_backend, info}]},
    {crash_log, "priv/sasl/crash.log"}], CombinedConfig),

  {ok, S} = file:open(Dest, write),
  io:format(S, "~p.", [dict:to_list(BossConfigOutput)]),
  {ok, [AppName|_]} = dict:find(applications, SrcBossConfig),
  io:format("~s's boss.config transformation finished.~n", [AppName]);

main(_) ->
  io:format("usage: cb_config <src_config_file> <destination_config_file>~n").

